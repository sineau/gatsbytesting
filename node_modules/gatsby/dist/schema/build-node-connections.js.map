{"version":3,"sources":["../../src/schema/build-node-connections.js"],"names":["_","require","connectionArgs","connectionDefinitions","GraphQLInputObjectType","inferInputObjectStructureFromNodes","buildConnectionFields","getNodes","module","exports","types","connections","each","type","name","nodes","nodeType","nodeObjectType","connectionFields","typeConnection","connectionType","typeName","sort","inferredFields","camelCase","description","args","filter","fields","resolve","object","resolveArgs","b","rootValue","path","componentChunkName","includes","id","runSift","latestNodes","n","internal","connection"],"mappings":";;;;;;;;AACA,IAAMA,IAAIC,QAAS,QAAT,CAAV;;eACkDA,QAAS,oBAAT,C;IAA1CC,c,YAAAA,c;IAAgBC,qB,YAAAA,qB;;gBACWF,QAAS,SAAT,C;IAA3BG,sB,aAAAA,sB;;gBAGJH,QAAS,8BAAT,C;IADFI,kC,aAAAA,kC;;AAEF,IAAMC,wBAAwBL,QAAS,2BAAT,CAA9B;;gBACqBA,QAAS,UAAT,C;IAAbM,Q,aAAAA,Q;;AAERC,OAAOC,OAAP,GAAiB,UAACC,KAAD,EAAgB;AAC/B,MAAMC,cAAc,EAApB;;AAEAX,IAAEY,IAAF,CAAOF,KAAP,EAAc,UAACG,IAAD,CAAM,gBAAN,EAA2B;AACvC;AACA;AACA,QAAIA,KAAKC,IAAL,KAAe,MAAnB,EAA0B;AACxB;AACD;AACD,QAAMC,QAAQF,KAAKE,KAAnB;;AANuC,gCAOIZ,sBAAsB;AAC/Da,gBAAUH,KAAKI,cADgD;AAE/DC,wBAAkB;AAAA,eAAMZ,sBAAsBO,IAAtB,CAAN;AAAA;AAF6C,KAAtB,CAPJ;AAAA,QAOfM,cAPe,yBAO/BC,cAP+B;;AAAA,gCAYNf,mCAAmC;AAClEU,WADkE;AAElEM,gBAAW,GAAER,KAAKC,IAAK;AAF2C,KAAnC,CAZM;AAAA,QAY/BQ,IAZ+B,yBAY/BA,IAZ+B;AAAA,QAYzBC,cAZyB,yBAYzBA,cAZyB;;AAiBvCZ,gBAAYX,EAAEwB,SAAF,CAAa,OAAMX,KAAKC,IAAK,EAA7B,CAAZ,IAA+C;AAC7CD,YAAMM,cADuC;AAE7CM,mBAAc,qBAAoBZ,KAAKC,IAAK,QAFC;AAG7CY,uCACKxB,cADL;AAEEoB,YAFF;AAGEK,gBAAQ;AACNd,gBAAM,IAAIT,sBAAJ,CAA2B;AAC/BU,kBAAMd,EAAEwB,SAAF,CAAa,UAASX,KAAKC,IAAK,EAAhC,CADyB;AAE/BW,yBAAc,iCAFiB;AAG/BG,oBAAQ;AAAA,qBAAML,cAAN;AAAA;AAHuB,WAA3B;AADA;AAHV,QAH6C;AAc7CM,cAAQC,MAAR,EAAgBC,WAAhB,EAA6BC,CAA7B,QAA+C;AAAA,YAAbC,SAAa,QAAbA,SAAa;;AAC7C,YAAIC,aAAJ;AACA,YAAI,OAAOD,SAAP,KAAsB,WAA1B,EAAsC;AACpCC,iBAAOD,UAAUC,IAAjB;AACD;AACD;AACA,YACE,CAACA,IAAD,IACAD,SADA,IAEAA,UAAUE,kBAFV,IAGAnC,EAAEoC,QAAF,CAAWH,UAAUE,kBAArB,EAA0C,QAA1C,CAJF,EAKE;AACAD,iBAAQ,YAAWD,UAAUI,EAAG,EAAhC;AACD;AACD,YAAMC,UAAUrC,QAAS,YAAT,CAAhB;AACA,YAAMsC,cAAcvC,EAAE2B,MAAF,CAClBpB,UADkB,EAElB;AAAA,iBAAKiC,EAAEC,QAAF,CAAW5B,IAAX,KAAoBA,KAAKC,IAA9B;AAAA,SAFkB,CAApB;AAIA,eAAOwB,QAAQ;AACbZ,gBAAMK,WADO;AAEbhB,iBAAOwB,WAFM;AAGbG,sBAAY,IAHC;AAIbR;AAJa,SAAR,CAAP;AAMD;AAvC4C,KAA/C;AAyCD,GA1DD;;AA4DA,SAAOvB,WAAP;AACD,CAhED","file":"build-node-connections.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst { connectionArgs, connectionDefinitions } = require(`graphql-skip-limit`)\nconst { GraphQLInputObjectType } = require(`graphql`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst buildConnectionFields = require(`./build-connection-fields`)\nconst { getNodes } = require(`../redux`)\n\nmodule.exports = (types: any) => {\n  const connections = {}\n\n  _.each(types, (type /* , fieldName*/) => {\n    // Don't create a connection for the Site node since there can only be one\n    // of them.\n    if (type.name === `Site`) {\n      return\n    }\n    const nodes = type.nodes\n    const { connectionType: typeConnection } = connectionDefinitions({\n      nodeType: type.nodeObjectType,\n      connectionFields: () => buildConnectionFields(type),\n    })\n\n    const { sort, inferredFields } = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName: `${type.name}Connection`,\n    })\n\n    connections[_.camelCase(`all ${type.name}`)] = {\n      type: typeConnection,\n      description: `Connection to all ${type.name} nodes`,\n      args: {\n        ...connectionArgs,\n        sort,\n        filter: {\n          type: new GraphQLInputObjectType({\n            name: _.camelCase(`filter ${type.name}`),\n            description: `Filter connection on its fields`,\n            fields: () => inferredFields,\n          }),\n        },\n      },\n      resolve(object, resolveArgs, b, { rootValue }) {\n        let path\n        if (typeof rootValue !== `undefined`) {\n          path = rootValue.path\n        }\n        // If path isn't set, this is probably a layout\n        if (\n          !path &&\n          rootValue &&\n          rootValue.componentChunkName &&\n          _.includes(rootValue.componentChunkName, `layout`)\n        ) {\n          path = `LAYOUT___${rootValue.id}`\n        }\n        const runSift = require(`./run-sift`)\n        const latestNodes = _.filter(\n          getNodes(),\n          n => n.internal.type === type.name\n        )\n        return runSift({\n          args: resolveArgs,\n          nodes: latestNodes,\n          connection: true,\n          path,\n        })\n      },\n    }\n  })\n\n  return connections\n}\n"]}