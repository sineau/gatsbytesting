{"version":3,"sources":["../../src/schema/build-node-types.js"],"names":["_","require","GraphQLObjectType","GraphQLNonNull","GraphQLID","GraphQLList","GraphQLString","apiRunner","inferObjectStructureFromNodes","inferInputObjectStructureFromNodes","nodeInterface","getNodes","getNode","getNodeAndSavePathDependency","createPageDependency","module","exports","nodes","typeName","intermediateType","name","type","allNodes","traceId","fieldsFromPlugins","mergedFieldsFromPlugins","merge","gqlType","description","interfaces","fields","createNodeFields","proccesedType","isTypeOf","value","internal","inferedInputFields","inferredFields","args","resolve","a","context","runSift","latestNodes","filter","n","isObject","path","id","nodeObjectType","node","processedTypes","camelCase","createType","defaultNodeFields","parent","children","map","childNodesByType","flatMap","groupBy","undefined","Object","keys","forEach","maxChildCount","maxBy","values","childNodeType","c","g","length","filteredNodes","nodeId","childNode","find","types","Promise","all"],"mappings":"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","file":"build-node-types.js","sourcesContent":["// @flow\nconst _ = require(`lodash`)\nconst {\n  GraphQLObjectType,\n  GraphQLNonNull,\n  GraphQLID,\n  GraphQLList,\n  GraphQLString,\n} = require(`graphql`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst { inferObjectStructureFromNodes } = require(`./infer-graphql-type`)\nconst {\n  inferInputObjectStructureFromNodes,\n} = require(`./infer-graphql-input-fields`)\nconst { nodeInterface } = require(`./node-interface`)\nconst { getNodes, getNode, getNodeAndSavePathDependency } = require(`../redux`)\nconst { createPageDependency } = require(`../redux/actions/add-page-dependency`)\n\nimport type { ProcessedNodeType } from \"./infer-graphql-type\"\n\ntype TypeMap = { [typeName: string]: ProcessedNodeType }\n\nmodule.exports = async () => {\n  const types = _.groupBy(getNodes(), node => node.internal.type)\n  const processedTypes: TypeMap = {}\n\n  function createNodeFields(type: ProcessedNodeType) {\n    const defaultNodeFields = {\n      id: {\n        type: new GraphQLNonNull(GraphQLID),\n        description: `The id of this node.`,\n      },\n      parent: {\n        type: nodeInterface,\n        description: `The parent of this node.`,\n        resolve(node, a, context) {\n          return getNodeAndSavePathDependency(node.parent, context.path)\n        },\n      },\n      children: {\n        type: new GraphQLList(nodeInterface),\n        description: `The children of this node.`,\n        resolve(node, a, { path }) {\n          return node.children.map(id => getNodeAndSavePathDependency(id, path))\n        },\n      },\n    }\n\n    // Create children fields for each type of children e.g.\n    // \"childrenMarkdownRemark\".\n    const childNodesByType = _(type.nodes)\n      .flatMap(({ children }) => children.map(getNode))\n      .groupBy(\n        node => (node.internal ? _.camelCase(node.internal.type) : undefined)\n      )\n      .value()\n\n    Object.keys(childNodesByType).forEach(childNodeType => {\n      // Does this child type have one child per parent or multiple?\n      const maxChildCount = _.maxBy(\n        _.values(_.groupBy(childNodesByType[childNodeType], c => c.parent)),\n        g => g.length\n      ).length\n\n      if (maxChildCount > 1) {\n        defaultNodeFields[_.camelCase(`children ${childNodeType}`)] = {\n          type: new GraphQLList(processedTypes[childNodeType].nodeObjectType),\n          description: `The children of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const filteredNodes = node.children\n              .map(id => getNode(id))\n              .filter(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            // Add dependencies for the path\n            filteredNodes.forEach(n =>\n              createPageDependency({ path, nodeId: n.id })\n            )\n            return filteredNodes\n          },\n        }\n      } else {\n        defaultNodeFields[_.camelCase(`child ${childNodeType}`)] = {\n          type: processedTypes[childNodeType].nodeObjectType,\n          description: `The child of this node of type ${childNodeType}`,\n          resolve(node, a, { path }) {\n            const childNode = node.children\n              .map(id => getNode(id))\n              .find(\n                ({ internal }) => _.camelCase(internal.type) === childNodeType\n              )\n\n            if (childNode) {\n              // Add dependencies for the path\n              createPageDependency({ path, nodeId: childNode.id })\n              return childNode\n            }\n            return null\n          },\n        }\n      }\n    })\n\n    const inferredFields = inferObjectStructureFromNodes({\n      nodes: type.nodes,\n      types: _.values(processedTypes),\n      allNodes: getNodes(),\n    })\n\n    return {\n      ...defaultNodeFields,\n      ...inferredFields,\n      ...type.fieldsFromPlugins,\n    }\n  }\n\n  async function createType(nodes, typeName) {\n    const intermediateType = {}\n\n    intermediateType.name = typeName\n    intermediateType.nodes = nodes\n\n    const fieldsFromPlugins = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n      type: intermediateType,\n      allNodes: getNodes(),\n      traceId: `initial-setFieldsOnGraphQLNodeType`,\n    })\n\n    const mergedFieldsFromPlugins = _.merge(...fieldsFromPlugins)\n    const gqlType = new GraphQLObjectType({\n      name: typeName,\n      description: `Node of type ${typeName}`,\n      interfaces: [nodeInterface],\n      fields: () => createNodeFields(proccesedType),\n      isTypeOf: value => value.internal.type === typeName,\n    })\n\n    const inferedInputFields = inferInputObjectStructureFromNodes({\n      nodes,\n      typeName,\n    })\n\n    const proccesedType: ProcessedNodeType = {\n      ...intermediateType,\n      fieldsFromPlugins: mergedFieldsFromPlugins,\n      nodeObjectType: gqlType,\n      node: {\n        name: typeName,\n        type: gqlType,\n        args: inferedInputFields.inferredFields,\n        resolve(a, args, context) {\n          const runSift = require(`./run-sift`)\n          const latestNodes = _.filter(\n            getNodes(),\n            n => n.internal.type === typeName\n          )\n          if (!_.isObject(args)) {\n            args = {}\n          }\n          return runSift({\n            args: { filter: { ...args } },\n            nodes: latestNodes,\n            path: context.path ? context.path : `LAYOUT___${context.id}`,\n          })\n        },\n      },\n    }\n\n    processedTypes[_.camelCase(typeName)] = proccesedType\n  }\n\n  // Create node types and node fields for nodes that have a resolve function.\n  await Promise.all(_.map(types, createType))\n\n  return processedTypes\n}\n"]}